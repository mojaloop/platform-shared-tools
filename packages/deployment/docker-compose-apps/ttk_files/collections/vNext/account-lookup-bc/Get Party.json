{
    "name": "full happy path",
    "test_cases": [
      {
        "id": 1,
        "name": "All BCs Happy Path",
        "meta": {
          "info": "All BCs Happy Path"
        },
        "requests": [
          {
            "id": 1,
            "meta": {
              "info": "Get party information"
            },
            "description": "Get party information",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "headers": {
              "Accept": "{$inputs.accept}",
              "Content-Type": "{$inputs.contentType}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.fromFspId}"
            },
            "params": {
              "Type": "{$inputs.toIdType}",
              "ID": "{$inputs.toIdValue}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback body should contain party",
                  "exec": [
                    "expect(callback.body).to.have.property('party')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Request FSPIOP-Source same as inputs fromFspId",
                  "exec": [
                    "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be parties",
                  "exec": [
                    "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version=1.1')"
                  ]
                },
                {
                  "id": 8,
                  "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                  "exec": [
                    "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                    "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                  ]
                }
              ]
            }
          }
        ]
      }
    ]
  }