{
  "name": "calculate-quote-invalid-fsps",
  "test_cases": [
    {
      "id": 1,
      "name": "Calculate Quote - Invalid Payer",
      "meta": {
        "info": "Calculate Quote - Invalid Payer"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Send Quote"
          },
          "description": "Send Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "invalidPayee",
            "FSPIOP-HTTP-Method": "POST",
            "FSPIOP-URI": "/quotes",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "quoteId": "{$requestVariables.quoteId}",
            "transactionId": "{$requestVariables.transactionId}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "invalidPayer"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.SIMPAYEE_MSISDN}",
                "fspId": "invalidPayee"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.SIMPAYEE_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response should contain error information",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error code",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error info",
                "exec": [
                  "expect(callback.body.errorInformation.errorDescription).to.include('Payer FSP ID not found')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain '3202'",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.include('3202')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.quoteId = \"{$function.generic.generateUUID}\"",
                "",
                "requestVariables.transactionId = \"{$function.generic.generateUUID}\"",
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": []
            }
          }
        }
      ]
    },
    {
      "id": 1,
      "name": "Calculate Quote - Invalid Payee",
      "meta": {
        "info": "Calculate Quote - Invalid Payee"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Send Quote"
          },
          "description": "Send Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "invalidPayee",
            "FSPIOP-HTTP-Method": "POST",
            "FSPIOP-URI": "/quotes",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "quoteId": "{$requestVariables.quoteId}",
            "transactionId": "{$requestVariables.transactionId}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.SIMPAYEE_MSISDN}",
                "fspId": "invalidPayee"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.SIMPAYEE_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response should contain error information",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error code",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain content-type",
                "exec": [
                  "expect(callback.body.errorInformation.errorDescription).to.include('Payee FSP ID not found')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain '3203'",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.include('3203')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.quoteId = \"{$function.generic.generateUUID}\"",
                "",
                "requestVariables.transactionId = \"{$function.generic.generateUUID}\"",
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": []
            }
          }
        }
      ]
    }
  ]
}