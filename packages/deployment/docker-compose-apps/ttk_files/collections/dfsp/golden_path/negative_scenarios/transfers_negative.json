{
  "name": "dfsp-p2p-tests",
  "test_cases": [
    {
      "id": 6,
      "name": "POST /Transfers with missing headers",
      "meta": {
        "info": "POST /Transfers with missing headers"
      },
      "requests": [
        {
          "id": 2,
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.1')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.2.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.2.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.2.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Send transfer with missing date header"
          },
          "description": "Send transfer with missing date header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain date-type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Send transfer with missing content type header (BUG)"
          },
          "description": "Send transfer with missing content type header (BUG)",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain body",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Content-type is required')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "Send transfer with missing fspiop header"
          },
          "description": "Send transfer with missing fspiop header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain fspiop-source header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('fspiop-source')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Send transfer with missing accept header"
          },
          "description": "Send transfer with missing accept header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain accept header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('accept')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 7,
      "name": "POST /Transfers with wrong headers",
      "meta": {
        "info": "POST /Transfers with wrong headers"
      },
      "requests": [
        {
          "id": 2,
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.1')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.2.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.2.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.2.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Send transfer with wrong date header (BUG)"
          },
          "description": "Send transfer with wrong date header (BUG)",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "Thursday"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain date-type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Send transfer with wrong accept header (BUG)"
          },
          "description": "Send transfer with wrong accept header (BUG)",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1000",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain accept header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('accept')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 9,
      "name": "POST /Transfers with missing parameters in body",
      "meta": {
        "info": "POST /Transfers with missing parameters in body"
      },
      "requests": [
        {
          "id": 2,
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.1')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.2.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.2.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.2.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Send transfer with missing transferId in body"
          },
          "description": "Send transfer with missing transferId in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain transferId-type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('transferId')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Send transfer with missing payerFsp in body"
          },
          "description": "Send transfer with missing payerFsp in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain payerFsp",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('payerFsp')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "Send transfer with missing payeeFsp in body"
          },
          "description": "Send transfer with missing payeeFsp in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain payeeFsp",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('payeeFsp')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Send transfer with missing amount in body"
          },
          "description": "Send transfer with missing amount in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain transferId-type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('amount')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 8,
          "meta": {
            "info": "Send transfer with missing currency in body"
          },
          "description": "Send transfer with missing currency in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": ""
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain currency",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('currency')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 9,
          "meta": {
            "info": "Send transfer with missing expiration in body "
          },
          "description": "Send transfer with missing expiration in body ",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain expiration",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('expiration')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 10,
          "meta": {
            "info": "Send transfer with missing ilpPacket in body"
          },
          "description": "Send transfer with missing ilpPacket in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain transferId",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('ilpPacket')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 11,
          "meta": {
            "info": "Send transfer with missing condition in body "
          },
          "description": "Send transfer with missing condition in body ",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain condition",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('condition')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3100'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 10,
      "name": "POST /Transfers with wrong parameters in body",
      "meta": {
        "info": "POST /Transfers with wrong parameters in body"
      },
      "requests": [
        {
          "id": 2,
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.1')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Send transfer"
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.2.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.2.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.2.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Send transfer with wrong  currency in body"
          },
          "description": "Send transfer with wrong  currency in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "POC"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain currency",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('currency')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Send transfer with wrong  amount in body"
          },
          "description": "Send transfer with wrong  amount in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "fasdas",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain amount",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('amount')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "Send transfer with wrong  transferId in body parameters"
          },
          "description": "Send transfer with wrong  transferId in body parameters",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "123124123",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain transferId",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('transferId')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Send transfer with wrong  expiration in body"
          },
          "description": "Send transfer with wrong  expiration in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "thursd",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": 3,
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": 4,
                "description": "Response should contain expiration",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('expiration')"
                ]
              },
              {
                "id": 5,
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3100')"
                ]
              },
              {
                "id": 6,
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 13,
      "name": "POST /Transfers with wrong optional parameters and headers",
      "meta": {
        "info": "POST /Transfers with wrong optional parameters and headers"
      },
      "requests": [
        {
          "id": 2,
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.1')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Send transfer with wrong optional HTTP header"
          },
          "description": "Send transfer with wrong optional HTTP header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-URI": "GET"
          },
          "body": {
            "transferId": "{$prev.2.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.2.callback.body.expiration}",
            "ilpPacket": "{$prev.2.callback.body.ilpPacket}",
            "condition": "{$prev.2.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.2.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.2.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.2.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Send quote Copy"
          },
          "description": "Send quote Copy",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.1')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Send transfer with wrong transactionId in body"
          },
          "description": "Send transfer with wrong transactionId in body",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.4.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.4.callback.body.expiration}",
            "ilpPacket": "{$prev.4.callback.body.ilpPacket}",
            "condition": "{$prev.4.callback.body.condition}",
            "transactionId": "123124123123"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.4.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.2.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.2.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}