{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "quoting_service",
      "meta": {
        "info": "quoting_service"
      },
      "requests": [
        {
          "id": 4,
          "meta": {
            "info": "Send quote"
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "FSPIOP-Destination": "{$inputs.toFspId}",
            "Authorization": "{$inputs.PAYER_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payerIdentifier}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.payeeIdentifier}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "5",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              },
              {
                "id": 12,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.payeefsp}')",
                  "}"
                ]
              },
              {
                "id": 13,
                "description": "Payee Content-Type",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')",
                  "}"
                ]
              },
              {
                "id": 14,
                "description": "IlpPacket exists",
                "exec": [
                  "",
                  "expect(callback.body.ilpPacket).not.equal(undefined)"
                ]
              },
              {
                "id": 15,
                "description": "confition exists",
                "exec": [
                  "expect(callback.body.condition).not.equal(undefined)"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "",
                "//if(environment.ON_US_TRANSFERS_ENABLED===true){",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.quoteId}', 'payeecallbacks')",
                "}",
                "//}"
              ]
            },
            "postRequest": {
              "exec": [
                "//if(environment.ON_US_TRANSFERS_ENABLED===true){",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  callback = await websocket.getMessage('payeecallbacks', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "console.log(callback);",
                "//}"
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "Get Quote"
          },
          "description": "Get Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes/{ID}",
          "path": "/quotes/{$prev.4.request.body.quoteId}",
          "method": "get",
          "params": {
            "ID": "{$prev.4.request.body.quoteId}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.payerfsp}",
            "FSPIOP-Destination": "{$inputs.toFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypeQuotes}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Send quote - missing date"
          },
          "description": "Send quote - missing date",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "FSPIOP-Source": "{$inputs.toFspId}",
            "FSPIOP-Destination": "{$inputs.toFspId}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payeeIdentifier}",
                "fspId": "{$inputs.toFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.payeeIdentifier}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "5",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3102",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                ]
              },
              {
                "id": 4,
                "description": "Error message date is required",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date');"
                ]
              },
              {
                "id": 5,
                "description": "Missing mandatory element error",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Invalid date-type');"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 8,
          "meta": {
            "info": "Send quote Copy"
          },
          "description": "Send quote Copy",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "FSPIOP-Destination": "{$inputs.toFspId}",
            "Authorization": "{$inputs.PAYER_BEARER_TOKEN}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.payerIdentifier}",
                "fspId": "{$inputs.SIMPAYER_NAME}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.payeeIdentifier}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "5",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Check Error code 3102",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                ]
              },
              {
                "id": 3,
                "description": "Check Missing mandatory element - Invalid accept header",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include(\"must have required property 'accept' - path: /headers\");"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 9,
          "meta": {
            "info": "Get Quote - Missing content type"
          },
          "description": "Get Quote - Missing content type",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes/{ID}",
          "path": "/quotes/{$prev.4.request.body.quoteId}",
          "method": "get",
          "params": {
            "ID": "{$prev.4.request.body.quoteId}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": false,
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.payerfsp}",
            "FSPIOP-Destination": "{$inputs.toFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Missing mandatory element error",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Content-type is required');"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3102",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": 10,
          "meta": {
            "info": "Get Quote - Invalid content type"
          },
          "description": "Get Quote - Invalid content type",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes/{ID}",
          "path": "/quotes/{$prev.4.request.body.quoteId}",
          "method": "get",
          "params": {
            "ID": "{$prev.4.request.body.quoteId}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": false,
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.payerfsp}",
            "FSPIOP-Destination": "{$inputs.toFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypeTransfers}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Check Malformed syntax error",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('Invalid content-type header');"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3101",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3101')"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}